package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vote Информация о голосовании пользователя.
//
// swagger:model Vote
type Vote struct {

	// Идентификатор пользователя.
	Nickname string `json:"nickname,omitempty"`

	// Отданный голос.
	Voice int32 `json:"voice,omitempty"`
}

// Validate validates this vote
func (m *Vote) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVoice(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var voteTypeVoicePropEnum []interface{}

func init() {
	var res []int32
	if err := json.Unmarshal([]byte(`[-1,1]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		voteTypeVoicePropEnum = append(voteTypeVoicePropEnum, v)
	}
}

// prop value enum
func (m *Vote) validateVoiceEnum(path, location string, value int32) error {
	if err := validate.Enum(path, location, value, voteTypeVoicePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Vote) validateVoice(formats strfmt.Registry) error {

	if swag.IsZero(m.Voice) { // not required
		return nil
	}

	// value enum
	if err := m.validateVoiceEnum("voice", "body", m.Voice); err != nil {
		return err
	}

	return nil
}
